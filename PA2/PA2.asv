t = 0:1:5;
t_axis = 0:0.01:5;
x = [1.0, 1.5, 2.0, 2.0, 2.5, 2.5];
y = [1.0, 0.5, 1.0, 1.5, 1.5, 1.0];

ax = x(1:end-1);
[bx,cx,dx] = ncspline(t,x);
ay = y(1:end-1);
[by,cy,dy] = ncspline(t,y);
xx = splineeval(t,x,bx,cx,dx,t_axis);
yy = splineeval(t,y,by,cy,dy,t_axis);

plot(xx, yy, x, y, 'o')
axis equal
grid on

% y(t) = 1.2 equivalent to f(t) = y(t) - 1.2 = 0
f = @(t_eval) splineeval(t,y,by,cy,dy,t_eval) - 1.2;
% f'(t) = y'(t)
fp = @(t_eval) diffsplineeval(t,y,by,cy,dy,t_eval);
tolerance = 10^-9;

pn = [2,5];
for i = 1:2
    while 1
        pn1(i) = pn(i) - (f(pn(i))/fp(pn(i)));
        if (abs(pn1(i) - pn(i)) < tolerance)
            pn(i)=pn1(i);
            break
        end
        pn(i) = pn1(i);
    end
end
t1 = pn(1);
t2 = pn(2);

% hold on
% Confirmation
% x1 = splineeval(t,x,bx,cx,dx,t1);
% y1 = splineeval(t,y,by,cy,dy,t1);
% x2 = splineeval(t,x,bx,cx,dx,t2);
% y2 = splineeval(t,y,by,cy,dy,t2);
% plot(x1, y1, "ro", markersize=20)
% plot(x2, y2, "ro", markersize=20)

n = [16, 32, 64, 128, 10000];
h = (t2-t1)./n;
lengths = zeros([1,5]);

for i = 1:5
    t_series = t1:h(i):t2;
    xp = diffsplineeval(t,x,bx,cx,dx,t_series);
    yp = diffsplineeval(t,y,by,cy,dy,t_series);
    f_series = sqrt(xp.^2+yp.^2);
    lengths(i) = h(i)/2 * (f_series(1) + f_series(end) + sum(2*f_series(1:end-1)));
end

L = lengths(end);
errors = abs(lengths(1:4)-L);
h = h(1:4);
plot(h, errors, "bo", h, errors, "k")
% function appears linear; slope is d
slope = (errors(end)-errors(1))/(h(end)-h(1))